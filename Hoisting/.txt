Hoisting
â˜… Variable hoisting in JavaScript is a behavior where variable
declarations are moved (or "hoisted") to the top of their
containing scope during the compilation phase, regardless
of where they are declared within the code. This means that
even if you declare a variable later in your code, JavaScript
will move the declaration to the top of its current scope,
making it available for use throughout the entire scope.

In JS, even before the code starts execution the memory is
allocated to variables & functions

1. It should have been an outright error in many other
languages, as it is not possible to access something that is
not even created (defined) yet But in JS, We know that in the
memory creation phase, it assigns undefined and puts the
content of function to function's memory.

2. And in execution, it then executes whatever is asked. Here,
as execution goes line by line and not after compiling, it
could only print undefined and nothing else. This
phenomenon is not an error. However, if we remove var num
= 18; then it gives an error. Uncaught ReferenceError: x is not
defined


// Note - The function expression and Arrow functions cannot be
hoisted.